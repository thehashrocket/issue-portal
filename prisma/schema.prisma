generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  clients       Client[]
  sessions      Session[]
  assignedIssues Issue[]   @relation("AssignedIssues")
  reportedIssues Issue[]   @relation("ReportedIssues")
  uploadedFiles File[]     @relation("UploadedFiles")
  comments      Comment[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id          String       @id @default(uuid())
  name        String
  email       String?
  phone       String?
  address     String?
  website     String?
  description String?
  status      ClientStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  managerId   String?
  manager     User?        @relation(fields: [managerId], references: [id])

  @@index([managerId])
}

model Issue {
  id          String        @id @default(uuid())
  title       String
  description String?
  status      IssueStatus   @default(NEW)
  priority    IssuePriority @default(MEDIUM)
  assignedTo  User?         @relation("AssignedIssues", fields: [assignedToId], references: [id])
  assignedToId String?
  reportedBy  User          @relation("ReportedIssues", fields: [reportedById], references: [id])
  reportedById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  dueDate     DateTime?
  files       File[]
  comments    Comment[]

  @@index([assignedToId])
  @@index([reportedById])
}

model File {
  id          String    @id @default(uuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  key         String    @unique
  url         String
  uploadedBy  User      @relation("UploadedFiles", fields: [uploadedById], references: [id])
  uploadedById String
  issueId     String?
  issue       Issue?    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([uploadedById])
  @@index([issueId])
}

model Comment {
  id          String    @id @default(uuid())
  text        String
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  issue       Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdById])
  @@index([issueId])
}

enum Role {
  USER
  ADMIN
  ACCOUNT_MANAGER
  DEVELOPER
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  LEAD
  FORMER
}

enum IssueStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  PENDING
  NEEDS_REVIEW
  FIXED
  CLOSED
  WONT_FIX
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
